```python
import os
import re
import json
import shutil
from multiprocessing import Pool, Manager, cpu_count
from docx import Document
from docx.shared import RGBColor
import xlsxwriter
from tqdm import tqdm

# === CONFIG ===
INPUT_FILE   = "input.txt"
CHUNK_SIZE   = 2000
MOBILE_REGEX = r"(?<!\d)(?:\+91[\-\s]?|91[\-\s]?|91|0)?[6-9]\d{9}(?!\d)"
OUTPUT_DOCX  = "final_output_mobile_nested.docx"
OUTPUT_XLSX  = "final_output_mobile_nested.xlsx"
TEMP_DIR     = "temp_parts"

# === UTILITIES ===
def clean_text(s: str) -> str:
    return s.replace('\x00', '')

def flatten_json(obj, prefix=""):
    flat = {}
    if isinstance(obj, dict):
        for k, v in obj.items():
            path = f"{prefix}{k}"
            if isinstance(v, (dict, list)):
                flat.update(flatten_json(v, path + "."))
            else:
                flat[path] = v
    elif isinstance(obj, list):
        for i, item in enumerate(obj):
            flat.update(flatten_json(item, f"{prefix}[{i}]."))
    return flat

# === LOAD RECORDS ===
def load_records():
    records = []
    last_id = None
    ct_re    = re.compile(r"^CreateTime:(\d+)\s+(.*)$")
    with open(INPUT_FILE, 'r', encoding='utf-8', errors='ignore') as f:
        for raw in f:
            line = raw.rstrip('\r\n')
            m = ct_re.match(line)
            if m and last_id is not None:
                ts = m.group(1)
                payload = clean_text(m.group(2))
                records.append((clean_text(last_id), ts, payload))
            elif line.strip():
                last_id = line.strip()
    return records

# === SPLIT INTO CHUNKS ===
def chunk_records(records):
    for i in range(0, len(records), CHUNK_SIZE):
        yield records[i:i+CHUNK_SIZE], i//CHUNK_SIZE

# === PROCESS ONE CHUNK ===
def process_chunk(args):
    chunk, idx, result_list = args
    pat = re.compile(MOBILE_REGEX)
    doc = Document()
    matches_data = []
    recs_seen = recs_with_mobile = 0

    for identifier, ts, payload in chunk:
        recs_seen += 1
        payload = clean_text(payload)
        hits = list(pat.finditer(payload))
        if not hits:
            continue
        recs_with_mobile += 1

        # 1) try JSON flatten
        flat = {}
        try:
            obj = json.loads(payload)
            flat = flatten_json(obj)
        except json.JSONDecodeError:
            pass

        # 2) build raw key->value map via regex on possibly escaped JSON
        try:
            raw = payload.encode('utf-8').decode('unicode_escape', 'ignore')
        except:
            raw = payload
        kv_pairs = re.findall(r'"([^"]+)"\s*:\s*(?:"([^"]*)"|(\d+))', raw)
        kv_map = {}
        for key, vs, vn in kv_pairs:
            val = vs if vs else vn
            kv_map.setdefault(val, []).append(key)

        # build Word paragraph
        para = doc.add_paragraph(f"{identifier} | CreateTime:{ts} | ")
        last = 0
        fields = []

        for m in hits:
            s, e = m.span()
            if s > last:
                para.add_run(payload[last:s])
            number = m.group()
            run = para.add_run(number)
            run.font.color.rgb = RGBColor(255, 0, 0)
            last = e

            # find field: first from flat, then from kv_map
            field = next((k for k,v in flat.items() if str(v)==number), "")
            if not field and number in kv_map:
                # pick first key if multiple
                field = kv_map[number][0]

            fields.append(field)
            matches_data.append((identifier, ts, payload, number, field))

        if last < len(payload):
            para.add_run(payload[last:])

        # append fields in red
        para.add_run(" | field: ")
        for i, fld in enumerate(fields):
            if i:
                para.add_run(", ")
            fr = para.add_run(fld)
            fr.font.color.rgb = RGBColor(255, 0, 0)

    if matches_data:
        os.makedirs(TEMP_DIR, exist_ok=True)
        doc.save(os.path.join(TEMP_DIR, f"chunk_{idx}.docx"))

    result_list.append((matches_data, recs_seen, recs_with_mobile))

# === MERGE WORD CHUNKS ===
def merge_word():
    merged = Document()
    for fn in tqdm(sorted(os.listdir(TEMP_DIR)), desc="Merging Word"):
        if not fn.endswith(".docx"):
            continue
        sub = Document(os.path.join(TEMP_DIR, fn))
        for para in sub.paragraphs:
            out_p = merged.add_paragraph()
            for run in para.runs:
                nr = out_p.add_run(run.text)
                if run.font.color and run.font.color.rgb:
                    nr.font.color.rgb = run.font.color.rgb
                nr.bold = run.bold; nr.italic = run.italic; nr.underline = run.underline
    merged.save(OUTPUT_DOCX)

# === WRITE EXCEL ===
def write_excel(all_matches):
    wb = xlsxwriter.Workbook(OUTPUT_XLSX)
    ws = wb.add_worksheet()
    red = wb.add_format({'font_color':'red'})
    ws.write_row(0, 0, ["Identifier","Timestamp","Payload","Mobile","Field"])
    row = 1
    for identifier, ts, payload, number, field in all_matches:
        ws.write(row, 0, identifier)
        ws.write(row, 1, ts)
        ws.write(row, 2, payload)
        ws.write(row, 3, number, red)
        ws.write(row, 4, field)
        row += 1
    wb.close()

# === MAIN ===
if __name__=="__main__":
    if os.path.isdir(TEMP_DIR):
        shutil.rmtree(TEMP_DIR)

    print("=== MOBILE EXTRACTOR (Generic Field Fallback) ===")
    records = load_records()
    print(f"Total records found: {len(records)}")
    chunks = list(chunk_records(records))

    mgr = Manager()
    results = mgr.list()
    with Pool(min(cpu_count(), len(chunks))) as pool:
        list(tqdm(pool.imap_unordered(
            process_chunk,
            [(chunk, idx, results) for chunk, idx in chunks]
        ), total=len(chunks), desc="Processing chunks"))

    all_matches = []
    tot = has = 0
    for data, recs, with_mobile in results:
        all_matches.extend(data)
        tot += recs
        has += with_mobile

    print(f"Records scanned: {tot}, with mobile: {has}, matches: {len(all_matches)}")

    if os.path.isdir(TEMP_DIR):
        merge_word()
    write_excel(all_matches)

    shutil.rmtree(TEMP_DIR)
    print(f"\n→ Word saved to {OUTPUT_DOCX}\n→ Excel saved to {OUTPUT_XLSX}")
```

**What’s new:**

* After attempting `json.loads` + `flatten_json`, we additionally parse **every** `"<key>":<value>` pair from the (unescaped) raw text via a single regex, building a `kv_map`.
* For each matched mobile number, we first look in the flattened JSON map, then fall back to `kv_map[number]` if needed.
* This covers any format—malformed JSON, nested strings, or escaped braces—without special‐casing particular keys.
